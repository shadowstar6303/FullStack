<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Project Cost Estimator</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: #f5f6fa;
    }

    h1 {
      text-align: center;
      padding: 20px;
      margin: 0;
      background: #2980b9;
      color: white;
    }

    .main {
      display: flex;
      padding: 20px;
      gap: 30px;
      max-width: 1400px;
      margin: auto;
    }

    form {
      flex: 1;
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    label {
      display: block;
      margin-top: 12px;
      font-weight: bold;
    }

    input, select {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      margin-top: 20px;
      width: 100%;
      padding: 10px;
      font-size: 16px;
      background-color: #3498db;
      border: none;
      color: white;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #1c5980;
    }

    .secondary-buttons {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    .secondary-buttons button {
      flex: 1;
      background-color: #95a5a6;
    }

    .secondary-buttons button:hover {
      background-color: #7f8c8d;
    }

    .right {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    #result {
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      max-height: 80vh;
      overflow-y: auto;
    }

    .downloads {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    .downloads button {
      flex: 1;
      background-color: #2ecc71;
    }

    .downloads button:last-child {
      background-color: #e67e22;
    }

    @media (max-width: 900px) {
      .main {
        flex-direction: column;
      }
    }
    footer {
  background: #ecf0f1;
  padding: 20px;
  margin-top: 40px;
}

footer h2 {
  margin-bottom: 10px;
}

footer ul {
  padding-left: 20px;
  list-style-type: disc;
}
.chart-dashboard {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
  padding: 20px;
}

.chart-card {
  background-color: #ffffff;
  padding: 12px;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  height: 280px; /* Moderate height */
  display: flex;
  align-items: center;
  justify-content: center;
}

.chart-card canvas {
  width: 100% !important;
  height: 100% !important;
}

@media (max-width: 768px) {
  .chart-dashboard {
    grid-template-columns: 1fr;
  }
}


  </style>
</head>
<body>

<h1>Project Cost Estimator</h1>

<div class="main">
  <!-- Left Form -->
  <form id="estimateForm">
    <label for="projectTitle">Project Title</label>
    <input type="text" id="projectTitle" placeholder="My Awesome Project" />

    <label for="projectType">Project Type</label>
    <select id="projectType" required>
      <option value="" disabled selected>Select Type</option>
      <option value="construction">Construction</option>
      <option value="software">Software Development</option>
      <option value="marketing">Marketing</option>
      <option value="EventPlanning">Event Planning</option>
      <option value="Engineering">Engineering</option>
      <option value="Research&Development">Research & Development</option>
      <option value="Others">Others</option>
    </select>

    <label for="duration">Duration (weeks)</label>
    <input type="number" id="duration" min="1" required />

    <label for="resources">Resources</label>
    <input type="number" id="resources" min="1" required />

    <label for="materials">Materials ($)</label>
    <input type="number" id="materials" min="0" value="0" />

    <label for="equipment">Equipment ($)</label>
    <input type="number" id="equipment" min="0" value="0" />

    <label for="travel">Travel ($)</label>
    <input type="number" id="travel" min="0" value="0" />

    <label for="subcontractors">Subcontractors ($)</label>
    <input type="number" id="subcontractors" min="0" value="0" />

    <label for="permits">Permits ($)</label>
    <input type="number" id="permits" min="0" value="0" />

    <label for="contingencyPercent">Contingency %</label>
    <input type="number" id="contingencyPercent" min="0" value="10" />

    <label for="gstPercent">GST %</label>
    <input type="number" id="gstPercent" min="0" value="18" />

    <button type="submit">Estimate Cost</button>

    <div class="secondary-buttons">
      <button type="button" id="sampleBtn">Sample Data</button>
      <button type="button" id="resetBtn">Reset</button>
    </div>
  </form>

  <!-- Right Result + Downloads -->
  <div class="right">
    <div id="result"></div>
    <div class="downloads">
      <button id="downloadCSVBtn">Download CSV</button>
      <button id="generateReceipt">Generate Receipt PDF</button>
    </div>
    <h3>Submitted Suggestions</h3>
<ul id="suggestionList"></ul>

  </div>
</div>
  
  
<div class="chart-dashboard">
  <div class="chart-card"><canvas id="barChart"></canvas></div>
  <div class="chart-card"><canvas id="lineChart"></canvas></div>
  <div class="chart-card"><canvas id="pieChart"></canvas></div>
  <div class="chart-card"><canvas id="boxPlotChart"></canvas></div>
</div>


  <footer style="background: #ecf0f1; padding: 20px; margin-top: 40px;">
  <div style="max-width: 1000px; margin: auto;">
    <h2 style="margin-bottom: 10px;">Algorithm & Time Complexity</h2>
    <p><strong>Estimation Logic:</strong></p>
    <ul>
      <li>Labor cost = resource rate × number of resources × duration</li>
      <li>Subtotal = Labor + Overhead + Materials + Equipment + Travel + Subcontractors + Permits</li>
      <li>Contingency = % of Subtotal</li>
      <li>GST = % of (Subtotal + Contingency)</li>
      <li>Total = Subtotal + Contingency + GST</li>
    </ul>
    <p><strong>Time Complexity:</strong> O(1) — Constant time per estimate. The operations are basic arithmetic with no loops or recursion.</p>
  </div>
</footer>

<script>
  const form = document.getElementById('estimateForm');
  const resultDiv = document.getElementById('result');
  let history = JSON.parse(localStorage.getItem('estimateHistory') || '[]');

  const typeImages = {
    construction: "https://source.unsplash.com/150x100/?construction",
    software: "https://source.unsplash.com/150x100/?software,code",
    marketing: "https://source.unsplash.com/150x100/?marketing",
    EventPlanning: "https://source.unsplash.com/150x100/?event,planning",
    Engineering: "https://source.unsplash.com/150x100/?engineering",
    "Research&Development": "https://source.unsplash.com/150x100/?research,lab",
    Others: "https://source.unsplash.com/150x100/?project"
  };

  function renderHistory() {
    if (history.length === 0) {
      resultDiv.innerHTML = '<p>No estimates yet.</p>';
      return;
    }

    const format = n => '$' + n.toLocaleString(undefined, { minimumFractionDigits: 2 });

    resultDiv.innerHTML = history.map((data, i) => {
      const type = data.type || 'Others';
      const imageUrl = typeImages[type] || typeImages['Others'];

      return `
        <div style="display: flex; gap: 20px; margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #ccc;">
          <div style="flex: 1;">
            <h3>${i + 1}. ${data.title}</h3>
            <p><strong>Project Type:</strong> ${type}</p>
            <p><strong>Total Cost:</strong> ${format(data.total)}</p>
            <ul>
              <li>Labor: ${format(data.labor)}</li>
              <li>Overhead: ${format(data.overhead)}</li>
              <li>Materials: ${format(data.materials)}</li>
              <li>Equipment: ${format(data.equipment)}</li>
              <li>Travel: ${format(data.travel)}</li>
              <li>Subcontractors: ${format(data.subcontractors)}</li>
              <li>Permits: ${format(data.permits)}</li>
              <li>Contingency (${data.contingencyPercent}%): ${format(data.contingency)}</li>
              <li>GST (${data.gstPercent}%): ${format(data.gst)}</li>
            </ul>
          </div>
          <div style="flex: 0 0 150px;">
            <img src="${imageUrl}" alt="${type}" style="width: 100%; border-radius: 10px; object-fit: cover;" />
          </div>
        </div>
      `;
    }).join('');
  }

  renderHistory();
function createCharts(latestEstimate) {
  const ctxBar = document.getElementById('barChart').getContext('2d');
  const ctxLine = document.getElementById('lineChart').getContext('2d');
  const ctxPie = document.getElementById('pieChart').getContext('2d');
  const ctxBox = document.getElementById('boxPlotChart').getContext('2d');

  const realValues = {
    labor: 30000,
    overhead: 5000,
    materials: 1500,
    equipment: 1000,
    travel: 300,
    subcontractors: 2000,
    permits: 500
  };

  const labels = Object.keys(realValues);
  const userData = labels.map(key => latestEstimate[key]);
  const realData = labels.map(key => realValues[key]);

  // Bar Chart: Real vs User
  new Chart(ctxBar, {
    type: 'bar',
    data: {
      labels,
      datasets: [
        {
          label: 'User Estimate',
          data: userData,
          backgroundColor: 'rgba(52, 152, 219, 0.7)'
        },
        {
          label: 'Industry Average',
          data: realData,
          backgroundColor: 'rgba(231, 76, 60, 0.7)'
        }
      ]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Real vs User Input (Bar Chart)'
        }
      }
    }
  });

  // Line Chart: Cost over Time
  const duration = parseInt(document.getElementById('duration').value);
  const costPerWeek = latestEstimate.total / duration;
  const weekLabels = Array.from({ length: duration }, (_, i) => `Week ${i + 1}`);
  const lineData = Array.from({ length: duration }, (_, i) => (i + 1) * costPerWeek);

  new Chart(ctxLine, {
    type: 'line',
    data: {
      labels: weekLabels,
      datasets: [{
        label: 'Accumulated Cost',
        data: lineData,
        borderColor: 'rgba(46, 204, 113, 0.9)',
        fill: false,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Cost Over Time (Line Graph)'
        }
      }
    }
  });

  // Pie Chart: Cost Distribution
  const pieLabels = ['Labor', 'Overhead', 'Materials', 'Equipment', 'Travel', 'Subcontractors', 'Permits'];
  const pieData = pieLabels.map(key => latestEstimate[key.toLowerCase()]);

  new Chart(ctxPie, {
    type: 'pie',
    data: {
      labels: pieLabels,
      datasets: [{
        data: pieData,
        backgroundColor: [
          '#2980b9', '#27ae60', '#f1c40f', '#8e44ad', '#e67e22', '#c0392b', '#34495e'
        ]
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Cost Distribution (Pie Chart)'
        }
      }
    }
  });

  // Boxplot: Cost variation (using history)
  const totalCosts = history.map(h => h.total);
  const min = Math.min(...totalCosts);
  const max = Math.max(...totalCosts);
  const median = totalCosts.sort((a, b) => a - b)[Math.floor(totalCosts.length / 2)];

  new Chart(ctxBox, {
    type: 'bar',
    data: {
      labels: ['Project Cost Spread'],
      datasets: [{
        label: 'Min',
        data: [min],
        backgroundColor: 'rgba(52, 152, 219, 0.5)'
      }, {
        label: 'Median',
        data: [median],
        backgroundColor: 'rgba(46, 204, 113, 0.5)'
      }, {
        label: 'Max',
        data: [max],
        backgroundColor: 'rgba(231, 76, 60, 0.5)'
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Cost Variation (Pseudo-Boxplot)'
        }
      },
      scales: {
        x: { stacked: true },
        y: { beginAtZero: true }
      }
    }
  });
}

  form.addEventListener('submit', (e) => {
    e.preventDefault();

    const title = document.getElementById('projectTitle').value.trim() || "Untitled Project";
    const type = document.getElementById('projectType').value;
    const duration = parseInt(document.getElementById('duration').value);
    const resources = parseInt(document.getElementById('resources').value);
    const materials = parseFloat(document.getElementById('materials').value) || 0;
    const equipment = parseFloat(document.getElementById('equipment').value) || 0;
    const travel = parseFloat(document.getElementById('travel').value) || 0;
    const subcontractors = parseFloat(document.getElementById('subcontractors').value) || 0;
    const permits = parseFloat(document.getElementById('permits').value) || 0;
    const contingencyPercent = parseFloat(document.getElementById('contingencyPercent').value) || 0;
    const gstPercent = parseFloat(document.getElementById('gstPercent').value) || 0;

    const costMap = {
      construction: { resourceCost: 500, overhead: 10000 },
      software: { resourceCost: 800, overhead: 5000 },
      marketing: { resourceCost: 600, overhead: 3000 }
    };

    const { resourceCost = 500, overhead = 5000 } = costMap[type] || {};

    const labor = resourceCost * resources * duration;
    const subtotal = labor + overhead + materials + equipment + travel + subcontractors + permits;
    const contingency = (contingencyPercent / 100) * subtotal;
    const beforeGST = subtotal + contingency;
    const gst = (gstPercent / 100) * beforeGST;
    const total = beforeGST + gst;

    const estimate = {
      title, type, labor, overhead, materials, equipment, travel, subcontractors, permits,
      contingency, gst, total, contingencyPercent, gstPercent
    };

    history.push(estimate);
    localStorage.setItem('estimateHistory', JSON.stringify(history));
    renderHistory();
    createCharts(estimate);
  });

  document.getElementById('sampleBtn').addEventListener('click', () => {
    document.getElementById('projectTitle').value = "Sample Project";
    document.getElementById('projectType').value = "software";
    document.getElementById('duration').value = 12;
    document.getElementById('resources').value = 5;
    document.getElementById('materials').value = 2000;
    document.getElementById('equipment').value = 1500;
    document.getElementById('travel').value = 500;
    document.getElementById('subcontractors').value = 3000;
    document.getElementById('permits').value = 400;
    document.getElementById('contingencyPercent').value = 12;
    document.getElementById('gstPercent').value = 18;

    resultDiv.innerHTML = '<p>Sample data loaded. Click "Estimate Cost" to calculate.</p>';
  });

  document.getElementById('resetBtn').addEventListener('click', () => {
    form.reset();
    history = [];
    localStorage.removeItem('estimateHistory');
    resultDiv.innerHTML = '<p>No estimates yet.</p>';
  });

  document.getElementById('downloadCSVBtn').addEventListener('click', () => {
  if (history.length === 0) {
    alert('No estimate history to export.');
    return;
  }

  // Define CSV headers
  const headers = [
    'Project Title', 'Project Type', 'Labor', 'Overhead', 'Materials', 'Equipment',
    'Travel', 'Subcontractors', 'Permits', 'Contingency',  'Contingency %','GST',  'GST %','Total'
  ];

  // Map history to CSV rows
  const rows = history.map(data => [
    `"${data.title.replace(/"/g, '""')}"`, // Escape quotes in title
    data.type,
    data.labor.toFixed(2),
    data.overhead.toFixed(2),
    data.materials.toFixed(2),
    data.equipment.toFixed(2),
    data.travel.toFixed(2),
    data.subcontractors.toFixed(2),
    data.permits.toFixed(2),
    data.contingency.toFixed(2),
    data.contingencyPercent,
    data.gst.toFixed(2),
    data.gstPercent,
    data.total.toFixed(2)
  ]);

  // Join headers and rows into CSV format string
  const csvContent = [headers.join(','), ...rows.map(r => r.join(','))].join('\n');

  // Create blob and download link
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'Project_Estimates_History.csv';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
});

   document.getElementById('generateReceipt').addEventListener('click', () => {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  if (history.length === 0) {
    alert("No estimates available to generate receipt.");
    return;
  }

  const estimate = history[history.length - 1]; // Get latest estimate
  const title = estimate.title || "Untitled Project";

  // Calculate subtotal
  const subtotal = estimate.labor + estimate.overhead + estimate.materials + estimate.equipment +
                   estimate.travel + estimate.subcontractors + estimate.permits;

  const currentDate = new Date().toLocaleDateString();

  // Header
  doc.setFontSize(20);
  doc.text(title, 105, 20, null, null, 'center');

  doc.setFontSize(14);
  doc.text('Project Cost Estimate Receipt', 105, 30, null, null, 'center');
  doc.setFontSize(10);
  doc.text(`Date: ${currentDate}`, 200, 10, null, null, 'right');

  doc.setLineWidth(0.5);
  doc.line(10, 35, 200, 35);

  let y = 45;

  // Payment items
  const paymentItems = [
    { key: 'labor', label: 'Labor' },
    { key: 'overhead', label: 'Overhead' },
    { key: 'materials', label: 'Materials' },
    { key: 'equipment', label: 'Equipment' },
    { key: 'travel', label: 'Travel' },
    { key: 'subcontractors', label: 'Subcontractors' },
    { key: 'permits', label: 'Permits' },
  ];

  doc.setFontSize(12);
  doc.text('Payments Breakdown:', 15, y);
  y += 8;

  paymentItems.forEach(item => {
    const amount = estimate[item.key] || 0;
    const percent = subtotal ? (amount / subtotal) * 100 : 0;
    doc.text(`${item.label}:`, 15, y);
    doc.text(`${percent.toFixed(1)}%`, 150, y);
    doc.text(`$${amount.toFixed(2)}`, 190, y, null, null, 'right');
    y += 8;
  });

  y += 4;
  doc.line(10, y, 200, y);
  y += 10;

  // Totals
  const printLine = (label, value) => {
    doc.text(label, 15, y);
    doc.text(`$${value.toFixed(2)}`, 190, y, null, null, 'right');
    y += 8;
  };

  printLine('Subtotal (Before GST):', subtotal);
  printLine(`Contingency (${estimate.contingencyPercent}%):`, estimate.contingency);
  printLine(`GST (${estimate.gstPercent}%):`, estimate.gst);
  printLine('Total (After GST):', estimate.total);

  y += 15;
  doc.setFontSize(12);
  doc.text('Thank you for using Project Cost Estimator!', 105, y, null, null, 'center');

  // Save PDF using title in file name
  const safeTitle = title.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9_-]/g, '');
  doc.save(`${safeTitle}_Estimate.pdf`);
});

  //suggestion Box
  const suggestionInput = document.getElementById("pythonSuggestion");
const suggestionList = document.getElementById("suggestionList");

document.getElementById("submitSuggestionBtn").addEventListener("click", async () => {
  const suggestion = suggestionInput.value.trim();
  if (!suggestion) {
    alert("Please enter your suggestion.");
    return;
  }

  try {
    const response = await fetch("http://localhost:5000/submit-suggestion", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ suggestion }),
    });

    if (response.ok) {
      suggestionInput.value = "";
      loadSuggestions();  // refresh the list
    } else {
      alert("Failed to submit suggestion.");
    }
  } catch (err) {
    console.error(err);
    alert("Server error.");
  }
});

async function loadSuggestions() {
  try {
    const res = await fetch("http://localhost:5000/get-suggestions");
    const data = await res.json();
    suggestionList.innerHTML = "";
    data.forEach((sug, idx) => {
      const li = document.createElement("li");
      li.textContent = `${idx + 1}. ${sug}`;
      suggestionList.appendChild(li);
    });
  } catch (err) {
    console.error("Failed to fetch suggestions", err);
  }
}

// Load suggestions on page load
window.onload = loadSuggestions;

</script>

</body>
</html>
